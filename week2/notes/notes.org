* Binary numbers
  
  With N bits we can represent 2 ^ n different things, such as numbers.

 | binary | decimal |
 |--------+---------|
 |      0 |       0 |
 |      1 |       1 |
 |     10 |       2 |
 |     11 |       3 |
 |    100 |       4 |

 Decimal system: 789 = 7 * 10^2 + 8 * 10^1 + 9 * 10^0
 The kth digit to the right is 10^k
 In binary, the kth digit to the right is 2^k. So:

 1 0 1 = 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 5
 
** Binary -> Decimal

   b_{n} b_{n-1} b_{n-2} ... b_1 b_0 = \Sigma_i b_i * 2^i 
   
   Maximum with k bits is 1 + 2 + 4 + ... + 2^{k-1} = 2^k - 1

** Fixed word size
 
   We will use a fixed number of bits, for instance 8:

   0000 0000
   0000 0001
   ...
   1111 1111

   256 possibilities => actually 128 positive numbers and 128 negative numbers.

** Decimal -> Binary

   87_decimal = ?_binary

   What is the largest power of 2 that fits in 87? That's 64.
   What is the next power of two we can fit? That's 16.

   87 = 64 + 16 + 4 + 2 + 1

   Now we put a 1 in every bit whose power shows up in the sum:

   0101 0111

   99 = 64 + 32 + 2 + 1 = 0110 0011
* Binary addition
  Start with the rightmost digits, add them and carry if necessary

  0001 0101
 +
  0101 1100
  ---------
  0111 0001
  
  We will be able to do this mechanically! Another one just for practice:

  0111 1101
 +
  0011 0110
  ---------
  1011 0011
  
** Overflow
   If there's still a carry bit when we get to the leftmost digits, we ignore it.
   
** Building an adder
   1. Half adder - adds two bits
   2. Full adder - adds three bits
   3. Adder - adss two numbers
   
** Half adder
   Adds two bits only, assuming there is no current carry.

   | a | b | sum | carry |
   |---+---+-----+-------|
   | 0 | 0 |   0 |     0 |
   | 0 | 1 |   1 |     0 |
   | 1 | 0 |   1 |     0 |
   | 1 | 1 |   0 |     1 |

** Full adder
   Adds two bits only, but carry may be present (let's call it c).
   
   | a | b | c | sum | carry |
   |---+---+---+-----+-------|
   | 0 | 0 | 0 |   0 |     0 |
   | 0 | 0 | 1 |   1 |     0 |
   | 0 | 1 | 0 |   1 |     0 |
   | 0 | 1 | 1 |   0 |     1 |
   | 1 | 0 | 0 |   1 |     0 |
   | 1 | 0 | 1 |   0 |     1 |
   | 1 | 1 | 0 |   0 |     1 |
   | 1 | 1 | 1 |   1 |     1 |
* Negative numbers
  - We could take the first bit and use it as a sign bit. All other bits represent a positive number.
    This way, we can only represent half as many numbers with the same amount of bits.
    + Complications:
      * There's a -0, what does it mean?
      * Implementations need to handle different cases
    Nobody uses this anymore!
  - Alternative: two's complement! -x is represented by the positive number 2^{n} - x
    With 16 bits:

    | 0000 |  0 |        |
    | 0001 |  1 |        |
    | 0010 |  2 |        |
    | 0011 |  3 |        |
    | 0100 |  4 |        |
    | 0101 |  5 |        |
    | 0110 |  6 |        |
    | 0111 |  7 |        |
    | 1000 | -8 | ( 8 )  |
    | 1001 | -7 | ( 9 )  |
    | 1010 | -6 | ( 10 ) |
    | 1011 | -5 | ( 11 ) |
    | 1100 | -4 | ( 12 ) |
    | 1101 | -3 | ( 13 ) |
    | 1110 | -2 | ( 14 ) |
    | 1111 | -1 | ( 15 ) |

    Positive numbers in the range 0 ... 2^{n-1} - 1
    Negative numbers in the range -1 ... -2^{n-1}
    
** Addition in 2's complement
   We get addition for free using the addition circuitry we've already built!
   
   -2 + -3 = 14 + 13 = 1110 + 1101 = 11011 (we throw the first 1 away as overflow though)
   
   11011 = 27_{10}
   1011 = 11_{10}

   11 in two's complement is -5, which is the right answer!
   But why does this work? Well, our addition is modulo 2^{n}, because we throw away the overflow bit (in
  this example, that overflow bit is 16); our two's complement representation is also modulo 2^{n}. 

** Computing -x
   Given x, compute -x in two's complement. If we solve this, we can do subtraction, because:

   y - x = y + (-x)
   
   - Idea:

     2^{n} - x = 1 + (2^n - 1) - x
                     ^-------- 1111111..._two
                     
     Subtracting x from 111111..._two is very easy, because all we have to do is flip all of x's bits!
     After this, we just have to add one to the result, which we already know how to do.

     + Example:
       
       Input: 4 = 0100

        1111      1011
       -      => +
        0100      0001
        ----      ----
        1011      1100
        
        1100 = 12 (-4 in two's complement)

      Trick to add 1: flip the bits from right to left, stopping the first time 0 is flipped to 1.

* Arithmetic logic unit
  
  The ALU computes a function on two inputs, and outputs the result. 

  [[./alu.png]]

  Which operations should the ALU perform? That is a tradeoff between hardware and software.
  
** The Hack ALU
   
   [[./hack-alu.png]]

   [[./control-bits.png]]

   [[./hack-alu-op.png]]

   X and Y are processed by the operations from left to right. The output will be the desired for 
   the selected function. The truth table helps to convince ourselves of that:

  [[./hack-alu-truth.png]] 

  [[./alu-example.png]]

  [[./output-control-bits.png]]
