* Boolean logic
** Boolean Operators
   - AND

    | x | y | AND |
    |---+---+-----|
    | 0 | 0 |   0 |
    | 0 | 1 |   0 |
    | 1 | 0 |   0 |
    | 1 | 1 |   1 |
    #+TBLFM: $3=$1 && $2

   - OR

    | x | y | OR |
    |---+---+----|
    | 0 | 0 |  0 |
    | 0 | 1 |  1 |
    | 1 | 0 |  1 |
    | 1 | 1 |  1 |
    #+TBLFM: $3=lor($1,$2)

   - NOT

    | x | NOT |
    |---+-----|
    | 0 |   1 |
    | 1 |   0 |
    #+TBLFM: $2=!$1

** Boolean Expressions

    - NOT(0 OR (1 AND 1)) = NOT(0 OR 1) = NOT(1) = 0
    - 1 AND (0 OR (NOT (1))) = 1 AND (0 OR 0) = 1 AND 0 = 0

** Boolean Functions
    - f(x,y,z) = (x AND y) OR (NOT(x) AND z)
     
     | x | y | z | f |
     |---+---+---+---|
     | 0 | 0 | 0 | 0 |
     | 0 | 0 | 1 | 1 |
     | 0 | 1 | 0 | 0 |
     | 1 | 0 | 0 | 0 |
     | 0 | 1 | 1 | 1 |
     | 1 | 0 | 1 | 0 |
     | 1 | 1 | 0 | 1 |
     | 1 | 1 | 1 | 1 |
     #+TBLFM: $4=lor($1 && $2, !$1 && $3)
     
** Boolean identities
*** Commutative laws
    - (x AND y) = (y AND x)
    - (x OR y) = (y OR x)
*** Associative laws
    - (x AND (y AND z)) = ((x AND y) AND z)
    - (x AND (y AND z)) = ((x AND y) AND z)
*** Distributive laws
    - (x AND (y OR z)) = (x AND y) OR (x AND z)
    - (x OR (y AND z)) = (x OR y) AND (x OR z)
*** De Morgan laws
    - (NOT (x AND y)) = NOT(x) OR NOT(y)
    - (NOT (x OR y)) = NOT(x) AND NOT(y)

** Boolean Algebra
   - NOT(NOT(x) AND NOT(x OR y)) = NOT(NOT(x) AND NOT(x) AND (NOT (Y))) = NOT(NOT(X) AND (NOT (Y))) = NOT(NOT(x)) OR NOT(NOT(Y)) = X or Y
   - ... or via truth table:
    
     | x | y | NOT(NOT(x) AND NOT(x OR y)) |
     |---+---+-----------------------------|
     | 0 | 0 |                           0 |
     | 0 | 1 |                           1 |
     | 1 | 0 |                           1 |
     | 1 | 1 |                           1 |
     #+TBLFM: $3=!(!$1 && !lor($1,$2))

* Boolean function synthesis
** Truth table to boolean expression
   Write one expression for each row where the result is 1. The expression must result in 1 only for that row.
   
    | x | y | z | f |                                |
    |---+---+---+---+--------------------------------|
    | 0 | 0 | 0 | 1 | (NOT(x) AND NOT(y) AND NOT(z)) |
    | 0 | 0 | 1 | 0 |                                |
    | 0 | 1 | 0 | 1 | (NOT(x) AND y AND NOT(z))      |
    | 0 | 1 | 1 | 0 |                                |
    | 1 | 0 | 0 | 1 | (x AND NOT(y) AND NOT(z))      |
    | 1 | 0 | 1 | 0 |                                |
    | 1 | 1 | 0 | 0 |                                |
    | 1 | 1 | 1 | 0 |                                |

    OR all of the expressions together: 
    (NOT(x) AND NOT(y) AND NOT(z)) OR (NOT(x) AND y AND NOT(z)) OR (x AND NOT(y) AND NOT(z))
    
    The first two expressions have both possibilities for y, but require not x and not z, so can be rewritten as: 
    (NOT(x) AND NOT(z))

    The entire expression can be rewritten after a few simplification steps as:
    NOT(z) AND (NOT(x) OR NOT(y))
    
    There is no algorithm that can find the shortest form of an expression.

** Theorem
   *Any Boolean function can be represented using an expression containing AND, OR, and NOT operations.*
   
   Actually, we don't need OR!
   Proof (from the De Morgan laws):

   (NOT (x OR y)) = NOT(x) AND NOT(y) => x OR y = NOT(NOT(x) AND NOT(y))
   
   In fact, any boolean function can be expressed using only an operator called NAND:

   | x | y | NAND |
   |---+---+------|
   | 0 | 0 |    1 |
   | 0 | 1 |    1 |
   | 1 | 0 |    1 |
   | 1 | 1 |    0 |

   x NAND y = NOT(x AND y)
   
   - What is the logical equivalent of NAND(x,x)?
     NAND(x,x) = NOT(x AND x) = NOT(x) OR NOT(x) = NOT(x)
   
** Theorem
   *Any Boolean function can be represented using an expression containing only the NAND operation*
   
   We have already shown that any expression can be written using AND and NOT, so all we have to do is
   show how to write these two operators using NAND.

   1) NOT(x) = x NAND x
   2) x AND y = NOT(NOT(x) OR NOT(y)) = NOT(x NAND y) = (x NAND y) NAND (x NAND y)

* Logic Gates
  
** Gate logic
   A technique for implementing boolean functions using logic gates
*** Logic gates
    - Elementary (Nand, And, Or, Not, ...)
    - Composite (Mux, Adder, ...)
*** Composite gates
    - How to do (a AND b AND c)?
   
      a---|                  a---|                       |
          |                      |--And--out-------------|
      b---|---And--out  =>   b---|                       |---And--out
          |                                              |
      c---|                  c---------------------------|
      
    The user sees only the gate on the left, and that's the interface abstraction. The gate can be implemented 
    in many ways, one of them is the one on the right.
    
** Circuit implementation
*** And, Or:
   
   [[./circuit-implementations.png]]
   
*** And(a,b,c):
    [[./circuit-implementations-2.png]]
* HDL - Hardware description language
** Implementing a logic gate
    1) Obtain full description of requirements for the gate

      [[./chip-specification.png]]

    2) Write the gate interface in HDL (input and output specifications, name of the chip)

      [[./chip-skeleton.png]]

    3) Build the chip! Let's do it assuming we have AND and OR chips:

      We notice that x XOR y = (x AND NOT(y)) OR (NOT(x) AND y)

      [[./xor-chip.png]]

      Notice how the a and b inputs are sent to an AND gate and a NOT gate at the same time. This is common
      in chip design - HDL supports multiple fan out!

    4) Name the connections between gates:

      [[./named-connections.png]]

    5) Implement chip diagram in HDL:

      Describe the chip parts one at a time

      [[./xor-hdl.png]]

** HDL: somme comments
   - hdl requires good documentation
   - we need to give good descriptive names to gates and connections - readability is terribly important
   - hdl is a functional/declarative language - there's no procedure going on
   - part statements can be written in any order, although it's customary to describe the diagram from left to right (makes the code more readable)
   - before using a chip part, you must know its interface. For example:
     Not(in= , out=), And(a= , b= , out= ), Or(a= , b= , out= )
   - we will be using letters like a, and b for input and words like out for output
   - connections like partName(a=a,...) and partName(...,out=out) are common
** Hardware description languages
   - Common HDLS: VHDL, Verilog, and many others
   - Our HDL:
     - Similar in spirit to other HDLs
     - Minimal and simple
     - Provides all you need for this course
   - HDL documentation:
     
     [[https://drive.google.com/file/d/1qzffR9le13QvR_w-JqY7RTsZU-b3eaFP/view] [Textbook Appendix A]]
     
     [[https://www.nand2tetris.org/hdl-survival-guide] [HDL survival guide]]
* Hardware simulation
  The hardware simulator allows us to test HDL code interactively or via predetermined script tests. It also supports snapshot testing.
  
  [[./hardware-simulation.png]]
  

  [[shell:../../tools/HardwareSimulator.sh][run hardware simulator]]

** Script-based simulation

   [[./script-testing.png]]
   
   With an output file:

   [[./script-testing-output.png]]
   

   + The output file can be used to visually inspect the behavior of the chip.
   + After running the script, the output file can be viewed by selecting View -> Output on the dropdown at the top right.
   + The command "compare-to" can be used to set up test expectations against another file.
     - The compare file can be written by a high level language like Java, which enables high-level planning of the hardware's architecture. 

* Hardware construction projects
** The players
*** System architects
    - Decides which chips are needed
    - For each chip, creates:
      - a chip API
      - a test script
      - a compare file
*** Developers
    - Using the resources created by the architect, builds the chips

** The developer's view
   - A stub file of the chip
   - A test file
   - A compare file
     
   Armed with those, implement the chip!

* Multi-bit buses
** Arrays of bits
   - Sometimes we manipulate a bunch of bits together
   - It is conceptually convinent to think of this bunch of bits as a single thing
   - HDLs provide convenient notation for dealing with these
   
   [[./multi-bit-buses.png]]
   
   [[./multi-bit-buses-hdl.png]]

   [[./add-three-way.png]]
   
   We can also access individual bits of a bus:

  [[./bit-by-bit.png]]

** Sub-buses:
   Buses can be composed of and broken into sub-buses:

   [[./sub-buses.png]]
* Project 1
** Elementary logic gates  
*** Multiplexors
    Multiplexor is a gate that takes two inputs a, and b, and a selector. If sel == 0, the mux outputs a, otherwise it outputs b:

    [[./multiplexor.png]]
   
    [[./andmuxor.png]]

    But how do we build the multiplexor? Turns out it can be built using the Or, And, and Not gates. Up to you to figure out how as part of project 1 :)

*** Demultiplexor
   
    The demultiplexor is like the inverse of a multiplexor:

    [[./demux.png]]
   
*** Multiplexing / Demultiplexing example in communications network

    [[./mux-demux-example.png]]

    By oscilating the selector bit in a predetermined cycle, we can send multiple messages over a single line. This operation can be asynchronous, i.e. both sides
    don't have to be connected to the same clock.
** 16-bit variants
*** And16
    
    [[./and16.png]]

** Multi-way variants
*** Mux4Way16
    
    [[./mux4way16.png]]
** Hack API

   Use it to figure out the names of the pins to use when using a chip.

   [[./hack-api.png]]
